name: Benchmark Codec

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to benchmark (branch, tag or SHA)"
        required: true
        default: "master"

env:
  BASELINE_NAME: master

jobs:
  benchmark:
    name: Run benchmark
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event.issue.pull_request &&
        contains(github.event.comment.body, '/benchmark')
      )
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      pull-requests: read

    steps:
      - name: Resolve benchmark ref
        id: rev
        uses: actions/github-script@v7
        with:
          script: |
            let sha;
            if (context.eventName === 'workflow_dispatch') {
              sha = context.payload.inputs.ref;
            } else {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.issue.number,
              });
              sha = pr.head.sha;
            }
            core.setOutput('sha', sha);

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.rev.outputs.sha }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-

      - name: Create Check Run
        if: github.event.issue.pull_request
        uses: actions/github-script@v7
        id: check
        with:
          script: |
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Run benchmark',
              head_sha: '${{ steps.rev.outputs.sha }}',
              external_id: '${{ github.run_id }}',
              status: 'in_progress',
            });
            core.setOutput('id', check.id);

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt install linux-tools-common linux-tools-generic linux-tools-`uname -r`

      - name: Configure kernel parameters
        run: |
          echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid
          echo 0 | sudo tee /proc/sys/kernel/kptr_restrict

      - name: Run memory test
        run: |
          set -o pipefail

          # Create temporary file
          temp_file=$(mktemp)

          # Run test and capture output
          cargo test --features dhat-heap -- --nocapture --test-threads 1 | tee "$temp_file"

          # Process output
          echo "## Memory Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Start Bytes | End Bytes | Peak Bytes | Peak Blocks | Throughput (Mbps) | Jobs/sec | Avg Time/job (us) |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------|-----------|------------|-------------|-------------------|----------|-------------------|" >> $GITHUB_STEP_SUMMARY

          grep '^{.*"test":' "$temp_file" | while read -r line; do
            echo "$line" | jq -e -r '[.test, .bytes[0], .bytes[1], .peak_bytes, .peak_blocks, .throughput_mbps, .jobs_per_sec, .avg_time_per_job_us] | @tsv' 2>/dev/null
          done | while IFS=$'\t' read -r test start end peak_bytes peak_blocks throughput jobs_per_sec avg_time; do
            echo "| $test | $start | $end | $peak_bytes | $peak_blocks | $throughput | $jobs_per_sec | $avg_time |" >> $GITHUB_STEP_SUMMARY
          done

          # Clean up temporary file
          rm -f "$temp_file"

      - name: Run benchmark
        run: |
          set -o pipefail

          # Create temporary file
          temp_file=$(mktemp)

          # Run test and capture output
          cargo bench -- --noplot --output-format bencher | tee "$temp_file"

          # Process output
          echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "| Name | Time (ns/iter) | Stddev |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------------|--------|" >> $GITHUB_STEP_SUMMARY

          grep "bench:" "$temp_file" | sed -E 's/test ([^ ]+) \.\.\. bench: *([0-9,.]+) ns\/iter \(\+\/- ([0-9,.]+)\)/| \1 | \2 | \3 |/' \
          >> $GITHUB_STEP_SUMMARY

          # Clean up temporary file
          rm -f "$temp_file"

      - name: Finalize Check Run
        if: github.event.issue.pull_request
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.check.outputs.id }},
              status: 'completed',
              conclusion: '${{ job.status }}',
              output: {
                title: 'Benchmark finished',
                summary: 'Benchmark completed.',
              },
            });
